TDDD27
Project Proposal
Tor Nilsson Ã–hrn and Emil Riseby
April 2013

#Functional Specification
Thingsbook is intended to be an application where users input data about their belongings and then get an overview of those.

The application will support the following functionalities:
    1. Add items. 
    2. Overview of belongings.
    3. Classify items.
    4. Trade items between users.

##Adding Items
An user should be able to input a variety of different items that he or she owns. 

##Overview
The user should be able to get an overview of all their belongings in an easy way, by using information visualization methods etc.

##Classify Items
The application should provide a way for the user to place his or her belongings in different categories. 

##Trade Items
Users will have the option to trade their items through the Thingsbook application.

#Technical Specification

##Django
Django is the server side framework of Thingsbook since it is popular and we have been in touch with organisations like bribespot.com that uses it. 

##MongoDB
We want to try out a NoSql database and MongoDB seems to be one of the most popular ones in that category.
As we more thoroughly examine the needs of our database architecture this choice might change. 

##jQuery
In order to simplify DOM selections and AJAX requests we intend to use jQuery.
We will also use jQuery's UI library to add interactive elements to the application.

##Backbone.js
To get structure in the otherwise potentially messy JavaScript we will use Backbone.js to implement a model-view structure.
Since Backbone.js requires Underscore.js this framework will also be used for the client side. 
##JSON
By using AJAX requests the client will communicate with the server and the data will be sent in the lightweight and JavaScript based JSON format. 

##Server Communication
AJAX is probably the most suitable server communication method for our project.
But we are interested in web sockets and will probably look into that too. 

##Authentication
OpenId will be used as authentication framework since it is easy to implement with Django.

##Testing Framework
For testing we will try Selenium as suggested.
